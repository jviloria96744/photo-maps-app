name: Main Application

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ARTIFACT_BUCKET: ${{ vars.ARTIFACT_BUCKET }}
  IMAGE_PROCESSOR_SECRET_NAME: ${{ secrets.IMAGE_PROCESSOR_SECRET_NAME }}
  IMAGE_PROCESSOR_SECRET_KEY: ${{ secrets.IMAGE_PROCESSOR_SECRET_KEY }}
  PIPELINE_TESTING: "false"
on:
  push:
    branches:
      - main
      - feature*
    paths:
      - "cdk-stacks/**"
      - ".github/**"
      - "admin-portal/**"
      - "client-web/**"
      - "lambdas/**"
jobs:
  change-detector:
    name: Detect File Changes And Artifact Existence
    runs-on: ubuntu-latest
    outputs:
      observability: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.observability }}
      certificates: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.certificates }}
      stateful-resources: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.stateful-resources }}
      web-client: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.web-client }}
      admin-portal: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.admin-portal }}
      image-processor: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.image-processor }}
      image-geotagger: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.image-geotagger }}
      image-labeller: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.image-labeller }}
      image-deleter: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.image-deleter }}
      app-server: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.app-server }}
      image-request-handler: ${{ (env.PIPELINE_TESTING == 'true') && 'true' || steps.filter.outputs.image-request-edge-handler }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            observability:
              - 'cdk-stacks/app/lib/stacks/observability/**'
            certificates:
              - 'cdk-stacks/app/lib/stacks/certificates/**'
            stateful-resources:
              - 'cdk-stacks/app/lib/stacks/asset-bucket/**'
              - 'cdk-stacks/app/lib/stacks/dynamodb/**'
            web-client:
              - 'client-web/**'
              - 'cdk-stacks/app/lib/stacks/web-client/**'
              - 'cdk-stacks/app/constructs/web-client/**'
            admin-portal:
              - 'admin-portal/**'
              - 'cdk-stacks/app/lib/stacks/admin-portal/**'
              - 'cdk-stacks/app/constructs/admin-portal/**'
            image-processor:
              - 'lambdas/image_geotagger/**'
              - 'lambdas/image_label_filter/**'
              - 'lambdas/step_function_orchestrator/**'
              - 'lambdas/upload-photo-notifications/**'
              - 'cdk-stacks/app/constructs/lambda-functions/**'
              - 'cdk-stacks/app/lib/stacks/image-processor/**'
              - 'cdk-stacks/app/constructs/step-functions/**'
            image-geotagger:
              - 'lambdas/image_geotagger/**'
            image-labeller:
              - 'lambdas/image_label_filter/**'
            image-deleter:
              - 'lambdas/image_deleter/**'
              - 'cdk-stacks/app/constructs/lambda-functions/**'
              - 'cdk-stacks/app/lib/stacks/image-deleter/**'
            app-server:
              - 'lambdas/app_server/**'
              - 'cdk-stacks/app/lib/stacks/app-api/**'
            image-request-handler:
              - 'lambdas/image-request-handler/**'
              - 'cdk-stacks/app/lib/stacks/image-request-edge-function/**'
  test-image-geotagger-lambda:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.image-geotagger == 'true'}}
    name: Run Image Geotagger Unit Tests
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Run Unit Tests
        uses: ./.github/actions/run-python-lambda-tests
        with:
          directory: "image_geotagger"
  test-image-labeller-lambda:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.image-labeller == 'true'}}
    name: Run Image Label Filter Unit Tests
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Run Unit Tests
        uses: ./.github/actions/run-python-lambda-tests
        with:
          directory: "image_label_filter"
  deploy-edge-function:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.image-request-handler == 'true' }}
    name: Deploy Edge Function
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Deploy Edge Function
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "CFEdgeFunctionParameter"
          cdk_context: "-c FLAG_IMAGE_REQUEST_EDGE_FUNCTION=true"
  deploy-observability-stack:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.observability == 'true' }}
    name: Deploy Dead Letter Queue
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Deploy Observability Stack
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "Observability"
          cdk_context: "-c FLAG_OBSERVABILITY=true"
  deploy-certificate-stack:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.certificates == 'true' }}
    name: Deploy Certificates And Store ARN Values in Parameter Store
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Deploy Certificate Stack
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "CertificateParameters"
          cdk_context: "-c FLAG_CERTIFICATE=true"
  deploy-admin-portal:
    needs: [change-detector, deploy-certificate-stack]
    if: |
      always() &&
      (needs.change-detector.outputs.admin-portal == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Admin Portal Front-End
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Build Artifact
        uses: ./.github/actions/build-web-artifact
        with:
          directory: "admin-portal"
      - name: Deploy Admin Portal Stack
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "AdminPortal"
          cdk_context: "-c FLAG_ADMIN_PORTAL=true"
  deploy-web-client:
    needs: [change-detector, deploy-certificate-stack]
    if: |
      always() &&
      (needs.change-detector.outputs.web-client == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Web Client Front-End
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Build Artifact
        uses: ./.github/actions/build-web-artifact
        with:
          directory: "client-web"
      - name: Deploy Web Client Stack
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "WebClient"
          cdk_context: "-c FLAG_WEB_CLIENT=true"
  deploy-stateful-resources:
    needs:
      [
        change-detector,
        deploy-certificate-stack,
        deploy-observability-stack,
        deploy-edge-function,
      ]
    if: |
      always() &&
      needs.change-detector.outputs.stateful-resources == 'true' && 
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Stateful Resources
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Set Environment Variables
        run: |
          echo "FLAG_STATEFUL=${{ needs.change-detector.outputs.stateful-resources == 'true' }}" >> $GITHUB_ENV
      - name: Deploy Stateful Resources
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "--all"
          cdk_context: "-c FLAG_STATEFUL=${{ env.FLAG_STATEFUL }}"
  deploy-image-processing-compute:
    needs:
      [
        change-detector,
        deploy-stateful-resources,
        test-image-geotagger-lambda,
        test-image-labeller-lambda,
      ]
    if: |
      always() &&
      (needs.change-detector.outputs.image-deleter == 'true' || needs.change-detector.outputs.image-processor == 'true') && 
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Image Processing Resources
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Set Environment Variables
        run: |
          echo "FLAG_IMAGE_DELETER=${{ needs.change-detector.outputs.image-deleter == 'true' }}" >> $GITHUB_ENV &&
          echo "FLAG_IMAGE_PROCESSOR=${{ needs.change-detector.outputs.image-processor == 'true' }}" >> $GITHUB_ENV
      - name: Deploy Image Processing Compute
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "--all"
          cdk_context: "-c FLAG_IMAGE_DELETER=${{ env.FLAG_IMAGE_DELETER }} -c FLAG_IMAGE_PROCESSOR=${{ env.FLAG_IMAGE_PROCESSOR }}"
  test-app-server-lambda:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.app-server == 'true' }}
    name: Run App Server Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Unit Tests
        uses: ./.github/actions/run-python-lambda-tests
        with:
          directory: "app_server"
  deploy-app-server:
    needs:
      [
        change-detector,
        test-app-server-lambda,
        deploy-stateful-resources,
        deploy-web-client,
      ]
    if: |
      always() &&
      (needs.change-detector.outputs.app-server == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy App REST API and Websocket Resources
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Deploy App API Stack
        uses: ./.github/actions/cdk-deploy
        with:
          directory: "cdk-stacks/app"
          cdk_stacks: "AppApi"
          cdk_context: "-c FLAG_APP_API=true"
