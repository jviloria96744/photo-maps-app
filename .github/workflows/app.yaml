name: Main Application

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ARTIFACT_BUCKET: ${{ vars.ARTIFACT_BUCKET }}
  IMAGE_PROCESSOR_SECRET_NAME: ${{ secrets.IMAGE_PROCESSOR_SECRET_NAME }}
  IMAGE_PROCESSOR_SECRET_KEY: ${{ secrets.IMAGE_PROCESSOR_SECRET_KEY }}
on:
  push:
    branches:
      - main
      - feature*
    paths:
      - "cdk-stacks/**"
      - ".github/**"
      - "admin-portal/**"
      - "client-web/**"
      - "lambdas/**"
jobs:
  change-detector:
    name: Detect File Changes And Artifact Existence
    runs-on: ubuntu-latest
    outputs:
      pipeline: ${{ steps.filter.outputs.pipeline }}
      certificates: ${{ steps.filter.outputs.certificates }}
      web-client: ${{ steps.filter.outputs.web-client }}
      admin-portal: ${{ steps.filter.outputs.admin-portal }}
      image-geotagger: ${{ steps.filter.outputs.image-geotagger }}
      image-labeller: ${{ steps.filter.outputs.image-labeller }}
      image-deleter: ${{ steps.filter.outputs.image-deleter }}
      app-server: ${{ steps.filter.outputs.app-server }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pipeline:
              - '.github/**'
            certificates:
              - 'cdk-stacks/app/lib/stacks/certificates/**'
            web-client:
              - 'client-web/**'
            admin-portal:
              - 'admin-portal/**'
              - 'cdk-stacks/app/lib/stacks/admin-portal/**'
              - 'cdk-stacks/app/constructs/admin-portal/**'
            image-geotagger:
              - 'lambdas/image_geotagger/**'
            image-labeller:
              - 'lambdas/image_label_filter/**'
            image-deleter:
              - 'lambdas/image_deleter/**'
            app-server:
              - 'lambdas/app_server/**'
  deploy-certificate-stack:
    needs: change-detector
    if: ${{ needs.change-detector.outputs.certificates == 'true' || needs.change-detector.outputs.pipeline == 'true'}}
    name: Deploy Certificates And Store ARN Values in Parameter Store
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: Install Dependencies
        working-directory: cdk-stacks/app
        run: npm ci
      - name: Deploy Stack
        if: github.ref == 'refs/heads/main'
        working-directory: cdk-stacks/app
        run: cdk deploy CertificateParameters --context FLAG_CERTIFICATE=true --require-approval "never"
  deploy-admin-portal:
    needs: [change-detector, deploy-certificate-stack]
    if: |
      always() &&
      (needs.change-detector.outputs.admin-portal == 'true' || needs.change-detector.outputs.pipeline == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Admin Portal Front-End
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Build Artifact
        uses: ./.github/actions/build-web-artifact
        with:
          directory: "admin-portal"
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: Install Dependencies
        working-directory: cdk-stacks/app
        run: npm ci
      - name: Deploy Stack
        working-directory: cdk-stacks/app
        run: cdk deploy AdminPortal --context FLAG_ADMIN_PORTAL=true  --require-approval "never"
  deploy-main-app:
    needs: [change-detector, deploy-certificate-stack]
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    name: Deploy Main App Resources
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS CLI and Credentials
        uses: ./.github/actions/configure-aws-cli
        with:
          account_id: ${{ env.AWS_ACCOUNT_ID }}
          default_region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: Install Dependencies
        working-directory: cdk-stacks/app
        run: npm ci
      - name: Deploy Stack
        if: github.ref == 'refs/heads/main'
        working-directory: cdk-stacks/app
        run: cdk deploy --context FLAG_MAIN_APP=true FLAG_IMAGE_DELETER=${{ needs.change-detector.outputs.image-deleter }} --require-approval "never" --all

  # build-client-web:
  #   needs: change-detector
  #   if: ${{ needs.change-detector.outputs.web-client == 'true' || needs.change-detector.outputs.pipeline == 'true'}}
  #   name: Create Web Client Artifact
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: write
  #     contents: read
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Configure AWS CLI and Credentials
  #       uses: ./.github/actions/configure-aws-cli
  #       with:
  #         account_id: ${{ env.AWS_ACCOUNT_ID }}
  #         default_region: ${{ env.AWS_DEFAULT_REGION }}
  #     - name: Build and Upload Artifact
  #       uses: ./.github/actions/build-web-artifact
  #       with:
  #         directory: "client-web"
  #         artifact_bucket: $ARTIFACT_BUCKET
  # test-image-geotagger-lambda:
  #   needs: change-detector
  #   if: ${{ needs.change-detector.outputs.image-geotagger == 'true' || needs.change-detector.outputs.pipeline == 'true'}}
  #   name: Run Image Geotagger Unit Tests
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: write
  #     contents: read
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Configure AWS CLI and Credentials
  #       uses: ./.github/actions/configure-aws-cli
  #       with:
  #         account_id: ${{ env.AWS_ACCOUNT_ID }}
  #         default_region: ${{ env.AWS_DEFAULT_REGION }}
  #     - name: Run Unit Tests
  #       uses: ./.github/actions/run-python-lambda-tests
  #       with:
  #         directory: "image_geotagger"
  # test-image-labeller-lambda:
  #   needs: change-detector
  #   if: ${{ needs.change-detector.outputs.image-labeller == 'true' || needs.change-detector.outputs.pipeline == 'true'}}
  #   name: Run Image Label Filter Unit Tests
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: write
  #     contents: read
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Configure AWS CLI and Credentials
  #       uses: ./.github/actions/configure-aws-cli
  #       with:
  #         account_id: ${{ env.AWS_ACCOUNT_ID }}
  #         default_region: ${{ env.AWS_DEFAULT_REGION }}
  #     - name: Run Unit Tests
  #       uses: ./.github/actions/run-python-lambda-tests
  #       with:
  #         directory: "image_label_filter"
  # test-app-server-lambda:
  #   needs: change-detector
  #   if: ${{ needs.change-detector.outputs.app-server == 'true' || needs.change-detector.outputs.pipeline == 'true'}}
  #   name: Run App Server Unit Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Run Unit Tests
  #       uses: ./.github/actions/run-python-lambda-tests
  #       with:
  #         directory: "app_server"
  # deploy:
  #   name: Build/Deploy Application Infrastructure
  #   timeout-minutes: 20
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       build-admin-portal,
  #       build-client-web,
  #       test-image-geotagger-lambda,
  #       test-image-labeller-lambda,
  #       test-app-server-lambda,
  #     ]
  #   if: |
  #     always() &&
  #     !contains(needs.*.result, 'failure') &&
  #     !contains(needs.*.result, 'cancelled')
  #   permissions:
  #     actions: write
  #     contents: read
  #     id-token: write
  #   steps:
  #     - uses: actions/checkout@v3
  # - name: Configure AWS CLI and Credentials
  #   uses: ./.github/actions/configure-aws-cli
  #   with:
  #     account_id: ${{ env.AWS_ACCOUNT_ID }}
  #     default_region: ${{ env.AWS_DEFAULT_REGION }}
  # - uses: actions/setup-node@v3
  #   with:
  #     node-version: 16.17.0
  # - name: Download Admin Portal Artifact
  #   working-directory: admin-portal
  #   run: aws s3 sync s3://$ARTIFACT_BUCKET/admin-portal/ dist/
  # - name: Download Web Client Artifact
  #   working-directory: client-web
  #   run: aws s3 sync s3://$ARTIFACT_BUCKET/client-web/ dist/
  # - name: Install CDK
  #   run: npm install -g aws-cdk
  # - name: Install Dependencies
  #   working-directory: cdk-stacks/app
  #   run: npm ci
  # - name: Test Synth Step
  #   if: github.ref != 'refs/heads/main'
  #   working-directory: cdk-stacks/app
  #   run: cdk synth --all
  # - name: Deploy Stack
  #   if: github.ref == 'refs/heads/main'
  #   working-directory: cdk-stacks/app
  #   run: cdk deploy --require-approval "never" --all
